{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","this","setState","document","getElementsByTagName","map","item","addEventListener","e","target","value","searchYelp","Object","keys","onClick","handleSortByChange","className","getSortByClass","key","onKeyPress","renderSortByOptions","onChange","placeholder","React","Component","Business","href","business","url","rel","src","imageSrc","alt","name","lat","long","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","fetch","headers","Authorization","response","ok","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","coordinates","latitude","longitude","console","log","App","then","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2a38671.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n        this.sortByOptions = {\r\n            \"Best Match\": \"best_match\",\r\n            \"Highest Rated\": \"rating\",\r\n            \"Most Reviewed\": \"review_count\"\r\n        };\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if (this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        } return '';\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({ sortBy: sortByOption });\r\n        [...document.getElementsByTagName('li')].map(item => item.addEventListener('click', this.handleSearch.bind(this, item)))\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({ term: e.target.value })\r\n    }\r\n\r\n    handleLocationChange(e) {\r\n        this.setState({ location: e.target.value })\r\n    }\r\n\r\n    handleSearch() {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions)\r\n            .map(sortByOption => {\r\n                return (\r\n                    <li onClick={this.handleSortByChange.bind(this, this.sortByOptions[sortByOption])} className={this.getSortByClass(this.sortByOptions[sortByOption])} key={this.sortByOptions[sortByOption]}>\r\n                        {sortByOption}\r\n                    </li>)\r\n            }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\" onKeyPress={(e) => { if (e.key === 'Enter') { this.handleSearch() } }}>\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <button onClick={this.handleSearch}>Let's Go</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Business.css';\r\n\r\nexport class Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a href={this.props.business.url} target='_blank' rel='noreferrer noopener'><img src={this.props.business.imageSrc} alt={this.props.business.name} /></a>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <a href={'https://www.google.com/maps/@?api=1&map_action=map&zoom=19&center=' + this.props.business.lat + ',' + this.props.business.long} target='_blank' rel='noreferrer noopener'><p>{this.props.business.address}</p></a>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n                        <p>{this.props.business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './BusinessList.css';\r\nimport { Business } from '../Business/Business';\r\n\r\nexport class BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {this.props.businesses && this.props.businesses.map(business => <Business key={business.id} business={business} />)}\r\n            </div>\r\n        )\r\n    }\r\n}","const apiKey = '812lnk1E2_stQXcZpi5jZETqJuRPtl3BH6dc62KivVdUo-eZ3eJJlUm16qZjFJtSlzHAt2b58fpB6DwojqPANDnu1mO6GNIiqEO2pxpv0i6MFeeDQVyMZBqcR7EaX3Yx';\r\n\r\nexport const Yelp = {\r\n    async search(term, location, sortBy) {\r\n        try {\r\n            const url = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}/autocomplete&sort_by=${sortBy}`;\r\n            const response = await fetch(url, {\r\n                headers: {\r\n                    Authorization: `Bearer ${apiKey}`\r\n                }\r\n            });\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                if (jsonResponse.businesses) {\r\n                    return jsonResponse.businesses.map(business => {\r\n                        return {\r\n                            id: business.id,\r\n                            imageSrc: business.image_url,\r\n                            name: business.name,\r\n                            address: business.location.address1,\r\n                            city: business.location.city,\r\n                            state: business.location.state,\r\n                            zipCode: business.zip_code,\r\n                            category: business.categories[0].title,\r\n                            rating: business.rating,\r\n                            reviewCount: business.review_count,\r\n                            url: business.url,\r\n                            lat: business.coordinates.latitude,\r\n                            long: business.coordinates.longitude\r\n                        }\r\n                    })\r\n                }\r\n            } console.log('Request failed!')\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { BusinessList } from '../BusinessList/BusinessList';\nimport { Yelp } from '../../util/Yelp';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  async searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp for ${term}, ${location}, ${sortBy}`);\n    Yelp.search(term, location, sortBy).then(businesses =>\n      this.setState({ businesses: businesses })\n    )\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>Ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}